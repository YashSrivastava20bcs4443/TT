#include <iostream>

using namespace std;

// Node structure for linked list
struct Node {
    int data;
    Node* next;
};

// Linked list class
class LinkedList {
private:
    Node* head;

public:
    // Constructor
    LinkedList() {
        head = nullptr;
    }

    // Function to add a value at the end of the list
    void addValue(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = nullptr;

        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Function to print all the values in the list
    void printList() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    // Function to create a third list containing the sum of two lists
    static LinkedList addLists(const LinkedList& list1, const LinkedList& list2) {
        LinkedList result;
        Node* node1 = list1.head;
        Node* node2 = list2.head;
        int carry = 0;

        while (node1 != nullptr || node2 != nullptr || carry != 0) {
            int sum = carry;
            if (node1 != nullptr) {
                sum += node1->data;
                node1 = node1->next;
            }
            if (node2 != nullptr) {
                sum += node2->data;
                node2 = node2->next;
            }

            carry = sum / 10;
            sum = sum % 10;

            result.addValue(sum);
        }

        return result;
    }
};

int main() {
    LinkedList list1;
    list1.addValue(7);
    list1.addValue(1);
    list1.addValue(5);

    LinkedList list2;
    list2.addValue(5);
    list2.addValue(9);
    list2.addValue(2);

    cout << "List 1: ";
    list1.printList();

    cout << "List 2: ";
    list2.printList();

    LinkedList sum = LinkedList::addLists(list1, list2);

    cout << "Sum: ";
    sum.printList();

    return 0;
}
